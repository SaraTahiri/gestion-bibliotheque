package controller;

import model.*;
import view.RetourFrame;
import exception.RetourNotFoundException;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.List;

public class RetourController {
    private RetourFrame vue;
    private RetourModel retourModel;

    public RetourController(RetourFrame vue, RetourModel retourModel) {
        this.vue = vue;
        this.retourModel = retourModel;

        updateTableData();
        vue.addCalculPenaliteListener(e -> calculerPenalite());
    }

    public void updateTableData() {
        List<Retour> retours = retourModel.getListe();
        Object[][] data = new Object[retours.size()][9];

        for (int i = 0; i < retours.size(); i++) {
            Retour retour = retours.get(i);
            data[i] = new Object[]{
                    retour.getIdEmprunt(),
                    retour.getLivre().getId(),
                    retour.getLivre().getTitre(),
                    retour.getUtilisateur().getId(),
                    retour.getUtilisateur().getNom(),
                    retour.getDateEmprunt(),
                    retour.getDateRetourPrevue(),
                    retour.getDateRetourEffective(),
                    ""
            };
        }
        vue.updateTableData(data);
    }

    private void calculerPenalite() {
        try {
            // Obtenir la ligne sélectionnée dans la vue
            int selectedRow = vue.getSelectedRow();
            if (selectedRow == -1) {
                throw new IllegalArgumentException("Veuillez sélectionner une ligne dans le tableau.");
            }

            // Obtenir la date de retour effective saisie par l'utilisateur
            String dateRetourEffectiveStr = vue.getDateRetourEffective();
            if (dateRetourEffectiveStr == null || dateRetourEffectiveStr.trim().isEmpty()) {
                throw new IllegalArgumentException("Veuillez entrer une date de retour effective.");
            }

            // Convertir la date de retour effective
            LocalDate dateRetourEffective;
            try {
                dateRetourEffective = LocalDate.parse(dateRetourEffectiveStr, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
            } catch (Exception e) {
                throw new IllegalArgumentException("Le format de la date doit être 'yyyy-MM-dd'.");
            }

            // Obtenir l'ID de l'emprunt sélectionné
            int idEmprunt = (int) vue.getValueAt(selectedRow, 0);
            Retour retour = retourModel.rechercherParID(idEmprunt);

            // Comparer la date de retour prévue et la date de retour effective
            LocalDate dateRetourPrevue = retour.getDateRetourPrevue();
            if (dateRetourEffective.isBefore(dateRetourPrevue) || dateRetourEffective.isEqual(dateRetourPrevue)) {
                // Aucun retard
                retour.setDateRetourEffective(dateRetourEffective);
                retourModel.modifierRetour(idEmprunt, dateRetourEffective);
                vue.setValueAt(selectedRow, 8, "0 dirhams"); // Aucune pénalité
                vue.showMessage("Pas de pénalité : Retour effectué à temps ou avant la date prévue.");
            } else {
                // Calcul des pénalités
                long joursDeRetard = ChronoUnit.DAYS.between(dateRetourPrevue, dateRetourEffective);
                double penalite = joursDeRetard * 50; // Pénalité : 50 dirhams par jour de retard

                retour.setDateRetourEffective(dateRetourEffective);
                retourModel.modifierRetour(idEmprunt, dateRetourEffective);
                vue.setValueAt(selectedRow, 8, penalite + " dirhams");
                vue.showMessage("Retour effectué en retard : " + joursDeRetard + " jours de retard. Pénalité = " + penalite + " dirhams.");
            }
        } catch (Exception e) {
            // Afficher l'erreur dans la vue
            vue.showError(e.getMessage());
        }
    }

    }
}
